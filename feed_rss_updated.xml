<?xml version="1.0" encoding="UTF-8" ?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/"> <channel><title>Cdm2883 的个人博客</title><description>我的中文个人博客 =￣ω￣=</description><link>https://blog.cdms.vip/</link><atom:link href="https://blog.cdms.vip/feed_rss_updated.xml" rel="self" type="application/rss+xml" /><managingEditor>Cdm2883</managingEditor><docs>https://github.com/Cdm2883/Blog</docs><language>zh</language> <pubDate>Tue, 07 Oct 2025 05:23:21 -0000</pubDate> <lastBuildDate>Tue, 07 Oct 2025 05:23:21 -0000</lastBuildDate> <ttl>1440</ttl> <generator>MkDocs RSS plugin - v1.15.0</generator> <item> <title>高版本 Android 设备无 Root 抓包 HTTPS 明文的简单解决方案</title> <category>Android</category> <category>Reversing</category> <category>技术</category> <description>自 Android 7.0 起，系统不再信任用户安装的 CA 证书，这使得原有的 HTTPS 抓包手段在多数应用中不再有效。解决该问题最直接的方式是将抓包工具提供的 CA 证书安装到系统证书目录，但这通常需要 Root 权限。然而，目前多数主流品牌的设备已不再向普通用户提供 Root 通道，甚至于以往支持 Root 的厂商近期也正逐步收紧对 Root 的开放策略，这使得获取 Root 权限愈发困难。另一种替代思路是借助已 Root 的虚拟机环境，但这类方案不仅占用大量存储空间，还难以完整还原真机的运行环境，容易被应用检测并拒绝运行。那在这样的背景下，是否存在一种适用于高版本安卓、无需额外设备、无需 Root、且能够有效捕获 HTTPS 明文的简单方法？</description><link>https://blog.cdms.vip/2025/09/07/android7-https-capture-without-root/</link> <pubDate>Sat, 06 Sep 2025 20:34:10 +0000</pubDate><source url="https://blog.cdms.vip/feed_rss_updated.xml">Cdm2883 的个人博客</source><comments>https://blog.cdms.vip/2025/09/07/android7-https-capture-without-root/#__comments</comments><guid isPermaLink="true">https://blog.cdms.vip/2025/09/07/android7-https-capture-without-root/</guid> </item> <item> <title>逆向分析：揭秘某国产知名视频弹幕网站客户端暗藏的可爱小桌宠</title> <category>Node.js</category> <category>Reversing</category> <category>技术</category> <description>当你沉浸在刷视频的快乐时，或许从未想过：你电脑里的软件，可能还藏着开发者悄悄埋下的小惊喜。最近，我在一次逆向分析中，意外发现某国产知名视频弹幕网站的 PC 客户端中，竟然暗藏着一个可以互动、还能换装的 Live2D 小桌宠！别急，这篇文章将带领你逐步拆解应用，层层剥开这神秘“外衣”下的秘密。</description><link>https://blog.cdms.vip/2025/08/24/electron-app-devmode-analysis/</link> <pubDate>Sat, 23 Aug 2025 17:59:45 +0000</pubDate><source url="https://blog.cdms.vip/feed_rss_updated.xml">Cdm2883 的个人博客</source><comments>https://blog.cdms.vip/2025/08/24/electron-app-devmode-analysis/#__comments</comments><guid isPermaLink="true">https://blog.cdms.vip/2025/08/24/electron-app-devmode-analysis/</guid> </item> <item> <title>将 Compose Multiplatform 移植到 OpenHarmony 的可行性研究</title> <category>Compose</category> <category>Kotlin</category> <category>技术</category> <description>随着鸿蒙系统的宣发，国内有越来越多的行业选择拥抱鸿蒙应用生态。但全新的生态，若从原生迁移构建新的应用，则需要大量的时间、学习、人力等成本。但好在为了解决这种问题，业内涌现了许多优秀的多平台开发框架，其中不乏有 Qt、Flutter、React Native 等等。鸿蒙的 Flutter 支持似乎是目前最受欢迎的 （以至于官方 ArkUI 代码中都带有 Flutter 字样），多平台框架的支持既可以减少开发的压力，又可以的在短时间内快速补充鸿蒙的生态。但我们今天探讨的主角是由 Jetpack Compose 演化而来新兴多平台 UI 框架 —— Compose Multiplatform。</description><link>https://blog.cdms.vip/2024/10/06/feasibility-study-for-compose-for-harmony/</link> <pubDate>Sun, 06 Oct 2024 12:26:51 +0000</pubDate><source url="https://blog.cdms.vip/feed_rss_updated.xml">Cdm2883 的个人博客</source><comments>https://blog.cdms.vip/2024/10/06/feasibility-study-for-compose-for-harmony/#__comments</comments><guid isPermaLink="true">https://blog.cdms.vip/2024/10/06/feasibility-study-for-compose-for-harmony/</guid> </item> <item> <title>Hello world!</title> <description>我的第一篇博文 （其实也不太算是） 就在今天诞生了！托了辣么久今天终于想着搞定它了！</description><link>https://blog.cdms.vip/2024/07/23/hello-world/</link> <pubDate>Tue, 23 Jul 2024 13:07:12 +0000</pubDate><source url="https://blog.cdms.vip/feed_rss_updated.xml">Cdm2883 的个人博客</source><comments>https://blog.cdms.vip/2024/07/23/hello-world/#__comments</comments><guid isPermaLink="true">https://blog.cdms.vip/2024/07/23/hello-world/</guid> </item> </channel></rss>